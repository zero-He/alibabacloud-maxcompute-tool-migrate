#!/bin/bash

CUR_DIR=$(pwd)
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
export MMA_HOME=$(dirname ${DIR})

function PRINTLN_STDERR()
{
    printf "${1}\n" 1>&2
}

function PRINT_STDERR_BOLD_BLUE()
{
    printf "\033[1;34m${1}\e[0m" 1 >&2
}

function PRINTLN_STDERR_BOLD_BLUE()
{
    printf "\033[1;34m${1}\n\e[0m" 1 >&2
}

function PRINTLN_STDERR_BOLD_YELLOW()
{
    printf "\033[1;33m${1}\n\e[0m" 1>&2
}

function PRINTLN_STDERR_BOLD_RED()
{
    printf "\033[1;31m${1}\n\e[0m" 1>&2
}

function START_MMA_SERVER_IF_NOT_EXISTS()
{
  PROCESS_COUNT=$(ps -ef | grep MmaServerMain | grep -v grep | wc -l)
  if [[ ${PROCESS_COUNT} != "0" ]]
  then
      PID=$(jps | grep MmaServerMain | awk '{print $1}')
      PRINTLN_STDERR_BOLD_YELLOW "MMA server exists: pid=${PID}."
  else
      sh ${MMA_HOME}/bin/mma-server > /dev/null 2>&1 &
      PID=$(jps | grep MmaServerMain | awk '{print $1}')
      PRINTLN_STDERR_BOLD_YELLOW "MMA server starts: pid=${PID}"
      echo ${PID}
  fi
}

function EXIT_ON_FAILURE()
{
    if [[ "$1" -ne 0 ]]
    then
        PRINTLN_STDERR_BOLD_RED "Failed"
        if [[ "$#" -eq 2 ]]
        then
            kill $2
        fi
        exit
    else
        PRINTLN_STDERR_BOLD_BLUE "Succeeded"
    fi
}

if [[ $# -lt 4 ]]; then
    PRINTLN_STDERR_BOLD_YELLOW "Usage: sh quickstart SOURCE_DB SOURCE_TBL DEST_PROJECT DEST_TBL"
    exit -1
fi

SOURCE_DB=$1
SOURCE_TBL=$2
DEST_DB=$3
DEST_TBL=$4

PRINTLN_STDERR_BOLD_YELLOW "Before executing the quickstart script, please make sure you have finished the following steps:"
PRINTLN_STDERR_BOLD_YELLOW "    1. Execute the setup wizard mma/bin/configure."
PRINTLN_STDERR_BOLD_YELLOW "The migration will start in 5 seconds."

sleep 5

PRINTLN_STDERR_BOLD_YELLOW ""
PRINTLN_STDERR_BOLD_YELLOW "Generating migration job configuration: "
PRINTLN_STDERR_BOLD_YELLOW "  echo ${SOURCE_DB}.${SOURCE_TBL}:${DEST_DB}.${DEST_TBL} > table_mapping.txt"
echo ${SOURCE_DB}.${SOURCE_TBL}:${DEST_DB}.${DEST_TBL} > table_mapping.txt
PRINTLN_STDERR_BOLD_YELLOW "  sh ${MMA_HOME}/bin/generate-config --to_migration_config \\"
PRINTLN_STDERR_BOLD_YELLOW "  --table_mapping table_mapping.txt > /dev/null 2>&1"
sh ${MMA_HOME}/bin/generate-config --to_migration_config \
--table_mapping table_mapping.txt > /dev/null 2>&1
EXIT_ON_FAILURE $?

PRINTLN_STDERR_BOLD_YELLOW ""
PRINTLN_STDERR_BOLD_YELLOW "Start MMA server: "
PRINTLN_STDERR_BOLD_YELLOW "  sh ${MMA_HOME}/bin/mma-server > /dev/null 2>&1 &"
PID=$(START_MMA_SERVER_IF_NOT_EXISTS)

PRINTLN_STDERR_BOLD_YELLOW ""
PRINTLN_STDERR_BOLD_YELLOW "Submit migration job: "
PRINTLN_STDERR_BOLD_YELLOW "  sh ${MMA_HOME}/bin/mma-client --start mma_migration_config.json"
sh ${MMA_HOME}/bin/mma-client --start mma_migration_config.json
EXIT_ON_FAILURE $? ${PID}

PRINTLN_STDERR_BOLD_YELLOW ""
PRINTLN_STDERR_BOLD_YELLOW "Wait until the migration job ends: "
PRINTLN_STDERR_BOLD_YELLOW "  sh ${MMA_HOME}/bin/mma-client --wait $SOURCE_DB.$SOURCE_TBL"
sh ${MMA_HOME}/bin/mma-client --wait "$SOURCE_DB.$SOURCE_TBL"
EXIT_ON_FAILURE $? ${PID}

if [[ ${PID} != "" ]]
then
    PRINTLN_STDERR_BOLD_YELLOW ""
    PRINTLN_STDERR_BOLD_YELLOW "Migration job ends. Stop MMA server: "
    PRINTLN_STDERR_BOLD_YELLOW "  kill ${PID}"
    kill "${PID}"
    EXIT_ON_FAILURE $?
else
    # do not stop the mma server if it start before running the quickstart script
    PRINTLN_STDERR_BOLD_YELLOW ""
    PRINTLN_STDERR_BOLD_YELLOW "Migration job ends."
fi
