#!/bin/bash

set -e
CUR_DIR=$(pwd)
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
export MMA_HOME=$(dirname ${DIR})

# directories
HIVE_CONFIG_PATH="${MMA_HOME}/conf/hive_config.ini"
MC_CONFIG_PATH="${MMA_HOME}/conf/odps_config.ini"

# constants
# hive metastore uri
HIVE_METASTORE_URIS_PROMPT="Please input Hive metastore URI(s):"
HIVE_METASTORE_URIS_HELP="See: \"hive.metastore.uris\" in hive-site.xml"
HIVE_METASTORE_URIS_EXAMPLE="thrift://hostname:9083"
# hive jdbc connection url
HIVE_JDBC_CONN_URL_PROMPT="Please input Hive JDBC connection string"
HIVE_JDBC_CONN_URL_HELP="Same as the connection string used in beeline, which starts with jdbc:hive2"
HIVE_JDBC_CONN_URL_EXAMPLE="jdbc:hive2://hostname:10000"
# hive jdbc connection user
HIVE_JDBC_CONN_USER_PROMPT="Please input Hive JDBC user name"
HIVE_JDBC_CONN_USER_HELP="Same as the user name used in beeline. The default value is \"Hive\""
HIVE_JDBC_CONN_USER_EXAMPLE="Hive"
# hive jdbc connection password
HIVE_JDBC_CONN_PW_PROMPT="Please input Hive JDBC password"
HIVE_JDBC_CONN_PW_HELP="Same as the password used in beeline"
HIVE_JDBC_CONN_PW_EXAMPLE=""
# mc endpoint
MC_ENDPOINT_PROMPT="Please input MaxCompute endpoint"
MC_ENDPOINT_HELP="See: https://help.aliyun.com/document_detail/34951.html"
MC_ENDPOINT_EXAMPLE="http://service.cn-hangzhou.maxcompute.aliyun.com/api"
# mc project name
MC_PROJECT_NAME_PROMPT="Please input MaxCompute project name"
MC_PROJECT_NAME_HELP="The target MaxCompute project"
MC_PROJECT_NAME_EXAMPLE=""
# aliyun access id
ALIYUN_ACCESS_ID_PROMPT="Please input Alibaba cloud accesskey id"
ALIYUN_ACCESS_ID_HELP="See: https://help.aliyun.com/document_detail/27803.html"
ALIYUN_ACCESS_ID_EXAMPLE=""
# aliyun access key
ALIYUN_ACCESS_KEY_PROMPT="Please input Alibaba accesskey secret"
ALIYUN_ACCESS_KEY_HELP="See: https://help.aliyun.com/document_detail/27803.html"
ALIYUN_ACCESS_KEY_EXAMPLE=""

function PRINTLN_STDERR()
{
    printf "${1}\n" 1>&2
}

function PRINT_STDERR_BOLD_BLUE()
{
    printf "\033[1;34m${1}\e[0m" 1 >&2
}

function PRINTLN_STDERR_BOLD_BLUE()
{
    printf "\033[1;34m${1}\n\e[0m" 1 >&2
}

function PRINTLN_STDERR_BOLD_YELLOW()
{
    printf "\033[1;33m${1}\n\e[0m" 1>&2
}

function GET_INPUT()
{
    QUESTION=$1
    HELP=$2
    EXAMPLE=$3
    PRINTLN_STDERR_BOLD_BLUE "$QUESTION"
    if [[ ${HELP} != "" ]]
    then
      PRINT_STDERR_BOLD_BLUE "HELP: "
      PRINTLN_STDERR "${HELP}"
    fi
    if [[ ${EXAMPLE} != "" ]]
    then
      PRINT_STDERR_BOLD_BLUE "EXAMPLE: "
      PRINTLN_STDERR "${EXAMPLE}"
    fi
    read -p ">" INPUT
    echo ${INPUT}
}

function CONFIGURE_HIVE_BASIC()
{
    HIVE_METASTORE_URIS=$(GET_INPUT \
    "$HIVE_METASTORE_URIS_PROMPT" "$HIVE_METASTORE_URIS_HELP" "$HIVE_METASTORE_URIS_EXAMPLE")
    echo "hms_thrift_addr=${HIVE_METASTORE_URIS}" >> ${HIVE_CONFIG_PATH}
    HIVE_JDBC_CONN_URL=$(GET_INPUT \
    "$HIVE_JDBC_CONN_URL_PROMPT" "$HIVE_JDBC_CONN_URL_HELP" "$HIVE_JDBC_CONN_URL_EXAMPLE")
    echo "jdbc_connection_url=${HIVE_JDBC_CONN_URL}" >> ${HIVE_CONFIG_PATH}
    HIVE_JDBC_CONN_USER=$(GET_INPUT \
    "$HIVE_JDBC_CONN_USER_PROMPT" "$HIVE_JDBC_CONN_USER_HELP" "$HIVE_JDBC_CONN_USER_EXAMPLE")
    echo "user=${HIVE_JDBC_CONN_USER}" >> ${HIVE_CONFIG_PATH}
    HIVE_JDBC_CONN_PW=$(GET_INPUT \
    "$HIVE_JDBC_CONN_PW_PROMPT" "$HIVE_JDBC_CONN_PW_HELP" "$HIVE_JDBC_CONN_PW_EXAMPLE")
    echo "password=${HIVE_JDBC_CONN_PW}" >> ${HIVE_CONFIG_PATH}
}

function CONFIGURE_HIVE_SECURITY()
{
    PRINTLN_STDERR_BOLD_BLUE "Not supported yet. Please contact your after sales manager for help."
}

function PRINT_CONFIGURE_HIVE_UDTF_GUIDANCE()
{
    PRINTLN_STDERR_BOLD_BLUE "Upload MaxCompute configurations to HDFS: "
    PRINTLN_STDERR "hdfs dfs -put -f ${MMA_HOME}/conf/odps_config.ini hdfs:///tmp/"
    PRINTLN_STDERR_BOLD_BLUE "Upload Hive UDTF resource jar to HDFS: "
    PRINTLN_STDERR "hdfs dfs -put -f ${MMA_HOME}/lib/data-transfer-hive-udtf-1.0-SNAPSHOT-jar-with-dependencies.jar hdfs:///tmp/"
    PRINTLN_STDERR_BOLD_BLUE "Create Hive function in beeline: "
    PRINTLN_STDERR "CREATE FUNCTION IF NOT EXISTS odps_data_dump_multi as 'com.aliyun.odps.datacarrier.transfer.OdpsDataTransferUDTF' USING JAR 'hdfs:///tmp/data-transfer-hive-udtf-1.0-SNAPSHOT-jar-with-dependencies.jar';"
}

function CONFIGURE_MC()
{
    MC_ENDPOINT=$(GET_INPUT "$MC_ENDPOINT_PROMPT" "$MC_ENDPOINT_HELP" "$MC_ENDPOINT_EXAMPLE")
    echo "end_point=${MC_ENDPOINT}" >> ${MC_CONFIG_PATH}
    MC_PROJECT_NAME=$(GET_INPUT \
    "$MC_PROJECT_NAME_PROMPT" "$MC_PROJECT_NAME_HELP" "$MC_PROJECT_NAME_EXAMPLE")
    echo "project_name=${MC_PROJECT_NAME}" >> ${MC_CONFIG_PATH}
    ALIYUN_ACCESS_ID=$(GET_INPUT \
    "$ALIYUN_ACCESS_ID_PROMPT" "$ALIYUN_ACCESS_ID_HELP" "$ALIYUN_ACCESS_ID_EXAMPLE")
    echo "access_id=${ALIYUN_ACCESS_ID}" >> ${MC_CONFIG_PATH}
    ALIYUN_ACCESS_KEY=$(GET_INPUT \
    "$ALIYUN_ACCESS_KEY_PROMPT" "$ALIYUN_ACCESS_KEY_HELP" "$ALIYUN_ACCESS_KEY_EXAMPLE")
    echo "access_key=${ALIYUN_ACCESS_KEY}" >> ${MC_CONFIG_PATH}
}

# Hive basic configurations
PRINTLN_STDERR_BOLD_YELLOW "Hive configurations"
if [[ -f ${HIVE_CONFIG_PATH} ]]
then
    while true; do
        SKIP=$(GET_INPUT "Hive configuration file exists. Skip this step? (Y/N)" "" "")
        case ${SKIP} in
            [Yy]) break;;
            [Nn]) rm -rf ${HIVE_CONFIG_PATH}; touch ${HIVE_CONFIG_PATH}; CONFIGURE_HIVE_BASIC; break;;
            *) PRINTLN_STDERR "Please input 'Y' or 'N'";;
        esac
    done
else
    touch ${HIVE_CONFIG_PATH}
    CONFIGURE_HIVE_BASIC
fi

# Hive security configurations
PRINTLN_STDERR ""
PRINTLN_STDERR_BOLD_YELLOW "Hive security configurations"
while true; do
    HAS_SECURITY_CONFIG=$(GET_INPUT "Has Kerberos authentication (Y/N)" "" "")
    case ${HAS_SECURITY_CONFIG} in
        [Yy]) CONFIGURE_HIVE_SECURITY; break;;
        [Nn]) break;;
        *) PRINTLN_STDERR "Please input 'Y' or 'N'";;
    esac
done

# MaxCompute configurations
PRINTLN_STDERR ""
PRINTLN_STDERR_BOLD_YELLOW "MaxCompute configurations"
if [[ -f ${MC_CONFIG_PATH} ]]
then
    while true; do
        DELETE=$(GET_INPUT "MaxCompute configuration file exists. Skip this step? (Y/N)" "" "")
        case ${DELETE} in
            [Yy]) break;;
            [Nn]) rm -rf ${MC_CONFIG_PATH}; touch ${MC_CONFIG_PATH}; CONFIGURE_MC; break;;
            *) PRINTLN_STDERR "Please input 'Y' or 'N'";;
        esac
    done
else
    touch ${MC_CONFIG_PATH}
    CONFIGURE_MC
fi

PRINTLN_STDERR ""
PRINTLN_STDERR_BOLD_YELLOW "Generating MMA configurations"
cd ${MMA_HOME}/conf/
sh ${MMA_HOME}/bin/generate-config -s \
    --hive_config ${MMA_HOME}/conf/hive_config.ini \
    --odps_config ${MMA_HOME}/conf/odps_config.ini > /dev/null 2>&1
cp ${MMA_HOME}/conf/mma_server_config.json ${MMA_HOME}/conf/mma_client_config.json
PRINTLN_STDERR_BOLD_YELLOW "Default MMA server configuration file path: ${MMA_HOME}/conf/mma_server_config.json"
PRINTLN_STDERR_BOLD_YELLOW "Default MMA client configuration file path: ${MMA_HOME}/conf/mma_client_config.json"

PRINTLN_STDERR ""
PRINTLN_STDERR_BOLD_YELLOW "Please execute the following commands manually to create required Hive UDTF"
PRINT_CONFIGURE_HIVE_UDTF_GUIDANCE
GET_INPUT "Press \"ENTER\" to confirm that the Hive UDTF has been created successfully" "" ""

PRINTLN_STDERR_BOLD_YELLOW "Congratulations! The configuration is completed!"
